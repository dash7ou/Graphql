type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  myPost(query: String): [Post!]!
  comments(query: String): [Comment!]!
  comment: Comment!
  post(id: ID!): Post!
  me: User!
}

type Mutation {
  createUser(data: createUserInput): AuthPayload!
  deleteUser: User!
  updateUser(data: updateUserInput): User!
  createPost(data: createPostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  createComment(data: createCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput): Comment!
  login(data: LoginData): AuthPayload!
}

input LoginData {
  email: String!
  password: String!
}

type AuthPayload {
  user: User!
  token: String!
}
type Subscription {
  count: Int!
  comment(postId: ID!): commentSubscriptionPayload!
  post(userId: ID!): postSubscriptionPayload!
  myPost: postSubscriptionPayload!
}

input createUserInput {
  name: String!
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
}
input createPostInput {
  title: String!
  body: String!
  published: Boolean!
}
input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input createCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String!
}
type User {
  id: ID!
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type postSubscriptionPayload {
  mutation: MutationType!
  node: Post!
}

type commentSubscriptionPayload {
  mutation: MutationType!
  node: Comment!
}
